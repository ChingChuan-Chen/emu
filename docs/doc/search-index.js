var searchIndex={};
searchIndex["emu_core"] = {"doc":"`emu_core` is a library that serves as a compute-focused…","i":[[0,"cache","emu_core","Infrastructure for caching kernels that are already JIT…",null,null],[3,"GlobalCache","emu_core::cache","A simple in-memory LRU cache for up to 32 JIT-ed kernels",null,null],[8,"Cache","","A trait to implement to create your own cache",null,null],[10,"contains","","",0,[[["u64"]],["bool"]]],[10,"get","","",0,[[["u64"]],[["devicefnmut"],["arc",["devicefnmut"]]]]],[10,"insert","","",0,[[["devicefnmut"],["u64"],["arc",["devicefnmut"]]]]],[11,"reserve","","Reserves space for the given number of additional kernels",1,[[["usize"]]]],[0,"compile","emu_core","The whole source-to-`DeviceFnMut` compilation pipeline",null,null],[3,"Spirv","emu_core::compile","A wrapper for SPIR-V bytecode",null,null],[12,"params","","",2,null],[12,"name","","",2,null],[12,"code","","",2,null],[3,"SpirvBuilder","","A builder for constructing a `Spirv`",null,null],[4,"SpirvOrFinished","","Either a finished `DeviceFnMut` or compiled SPIR-V",null,null],[13,"SpirvAndHash","","",3,null],[13,"Finished","","",3,null],[5,"compile","","Compiles the given source to `SpirvOrFinished`",null,[[["hash"]],[["spirvorfinished"],["compileerror"],["result",["spirvorfinished","compileerror"]]]]],[8,"GlslStruct","","A trait for structures that can exist in both Rust and GLSL",null,null],[10,"as_glsl","","Provides the GLSL structure definition code to define this…",4,[[],["string"]]],[8,"CompileToSpirv","","The trait to implement when adding support for a new…",null,null],[10,"compile_to_spirv","","Compiles the source language into SPIR-V",5,[[["i"]],[["compileerror"],["spirv"],["result",["spirv","compileerror"]]]]],[11,"new","","Creates a new builder",6,[[],["self"]]],[11,"set_entry_point_name","","Sets the name of the point in this chunk of SPIR-V where…",6,[[],["self"]]],[11,"add_param","","Appends a new constant parameter to the kernel in this…",6,[[],["self"]]],[11,"add_param_mut","","Appends a new mutable parameter to the kernel in this SPIR-V",6,[[],["self"]]],[11,"set_code_with_u32","","Set the actual code itself using an owned or borrowed…",6,[[["p"]],[["error"],["result",["error"]]]]],[11,"build","","Finish building",6,[[],["spirv"]]],[11,"set_code_with_u8","","Set the actual code itself using an owned `Vec``",6,[[],[["error"],["result",["error"]]]]],[11,"get_code_mut","","Get a mutable reference to the code stored here",3,[[["self"]],["option"]]],[11,"get_name_mut","","Mutate the entry point name",3,[[["self"]],[["string"],["option",["string"]]]]],[11,"get_params_mut","","Mutate the parameters",3,[[["self"]],[["devicefnmutparams"],["option",["devicefnmutparams"]]]]],[11,"finish","","Finish the compilation and return a `DeviceFnMut`",3,[[["self"]],[["compileornodeviceerror"],["result",["arc","compileornodeviceerror"]],["arc",["devicefnmut"]]]]],[0,"compile_impls","emu_core","A few implemented source languages that can be compiled to…",null,null],[3,"SpirvCompile","emu_core::compile_impls","A SPIR-V-to-SPIR-V compiler!",null,null],[3,"Glsl","","A wrapper of GLSL code with methods to help progressively…",null,null],[3,"GlslCompile","","A `shaderc`-based compiler for `Glsl` to SPIR-V",null,null],[3,"GlslKernel","","A convenience builder for GLSL compute kernels",null,null],[3,"GlslKernelCompile","","Another `shaderc`-based compiler for compiling `GlslKernel`",null,null],[11,"new","","Creates a new GLSL builder",7,[[],["self"]]],[11,"set_entry_point_name","","Sets the name of the point in this chunk of GLSL where it…",7,[[],["self"]]],[11,"add_param","","Declares an additional parameter - that is constant - to…",7,[[],["self"]]],[11,"add_param_mut","","Declares an additional parameter - that is mutable - to…",7,[[],["self"]]],[11,"set_code_with_glsl","","Use the given string as the GLSL source code",7,[[],["self"]]],[11,"new","","Initializes the builder",8,[[],["self"]]],[11,"spawn","","Spawns threads within each thread block",8,[[["u32"]],["self"]]],[11,"with_struct","","Appends a GLSL structure definition for the type which…",8,[[],["self"]]],[11,"with_const","","Appends a constant definition using the give left hand and…",8,[[],["self"]]],[11,"share","","Creates a shared variable using the given code",8,[[],["self"]]],[11,"param","","Generates code for a buffer through which constant data…",8,[[["into",["string"]],["string"]],["self"]]],[11,"param_mut","","Generates code for a buffer through which mutable data can…",8,[[["into",["string"]],["string"]],["self"]]],[11,"with_helper_code","","Adds the given helper code",8,[[],["self"]]],[11,"with_kernel_code","","Adds the body code for the kernel",8,[[],["self"]]],[0,"spawn","emu_core","Functions for spawning threads and launching compiled…",null,null],[3,"Spawner","emu_core::spawn","A \"builder\" for a space of threads that are to be spawned",null,null],[5,"spawn","","Constructs a `Spawner` with the given number of threads…",null,[[["u32"]],["spawner"]]],[11,"spawn","","Adds a new dimension to the space of threads with size…",9,[[["u32"]],["self"]]],[11,"launch","","Launches given `DeviceFnMut` with given arguments on the…",9,[[["self"]],[["launcherror"],["result",["launcherror"]]]]],[0,"boxed","emu_core","Functions for working with `DeviceBox<T>` and the device…",null,null],[8,"IntoDeviceBoxed","emu_core::boxed","A trait for creating a `DeviceBox<T>` by consuming an…",null,null],[10,"into_device_boxed","","",10,[[],[["result",["devicebox","nodeviceerror"]],["devicebox"],["nodeviceerror"]]]],[10,"into_device_boxed_mut","","",10,[[],[["result",["devicebox","nodeviceerror"]],["devicebox"],["nodeviceerror"]]]],[8,"AsDeviceBoxed","","A trait for creating a `DeviceBox<T>` from a reference to…",null,null],[10,"as_device_boxed","","",11,[[["self"]],[["result",["devicebox","nodeviceerror"]],["devicebox"],["nodeviceerror"]]]],[10,"as_device_boxed_mut","","",11,[[["self"]],[["result",["devicebox","nodeviceerror"]],["devicebox"],["nodeviceerror"]]]],[0,"pool","emu_core","Tools for managing the device pool either implicitly or…",null,null],[3,"DevicePoolMember","emu_core::pool","Represents a member of the device pool",null,null],[12,"device","","",12,null],[12,"device_info","","",12,null],[3,"DevicePoolMemberInfo","","Holds information about a member of the device pool",null,null],[12,"index","","The index of the device in the pool",13,null],[12,"info","","The actual information wrapped by this structure",13,null],[5,"pool","","Sets the device pool to the given `Vec` of devices",null,[[["devicepoolmember"],["vec",["devicepoolmember"]]],[["poolalreadyinitializederror"],["result",["poolalreadyinitializederror"]]]]],[5,"assert_device_pool_initialized","","Asserts that the device pool has been initialized",null,[[]]],[5,"take","","Takes the device currently selected out of the device pool…",null,[[],[["result",["mutex","nodeviceerror"]],["mutex"],["nodeviceerror"]]]],[5,"info_all","","Returns information about all devices in the pool",null,[[],[["vec",["devicepoolmemberinfo"]],["devicepoolmemberinfo"]]]],[5,"info","","Returns information about the currently selected device",null,[[],[["nodeviceerror"],["result",["devicepoolmemberinfo","nodeviceerror"]],["devicepoolmemberinfo"]]]],[5,"select","","Selects a device from the pool using the given selector…",null,[[["fnmut"]],[["nodeviceerror"],["result",["nodeviceerror"]]]]],[0,"error","emu_core","Various error types",null,null],[3,"NoDeviceError","emu_core::error","An error for when there is no device to complete a certain…",null,null],[3,"UnavailableDeviceError","","An error when a device is there but not available for use",null,null],[3,"CompileError","","An error for compilation failures",null,null],[3,"CompletionError","","An error for failure to complete data movement or…",null,null],[3,"PoolAlreadyInitializedError","","An error that occurs when you attempt to initialize an…",null,null],[3,"RuntimeError","","A runtime error that occurs on the device",null,null],[4,"GetError","","An error in getting data stored in a `DeviceBox`",null,null],[13,"Completion","","",14,null],[13,"NoDevice","","",14,null],[4,"CompileOrNoDeviceError","","An error for capturing compilation fails or no device…",null,null],[13,"Compile","","",15,null],[13,"NoDevice","","",15,null],[4,"LaunchError","","An error in launching kernels",null,null],[13,"NoDevice","","",16,null],[13,"Runtime","","",16,null],[0,"device","emu_core","The lowest-level, core functionality for controlling a GPU…",null,null],[3,"DeviceInfo","emu_core::device","Contains information about a device",null,null],[12,"0","","",17,null],[3,"Device","","Represents a single device",null,null],[12,"device","","The WebGPU device wrapped by this data structure",18,null],[12,"queue","","The queue this device exposes to submit work to",18,null],[12,"info","","Information about the device",18,null],[3,"DeviceBox","","A type for boxing stuff stored on a device",null,null],[3,"DeviceFnMut","","Represents a compiled kernel that can then be launched…",null,null],[3,"DeviceFnMutParams","","Describes the parameters that can be passed to a…",null,null],[3,"ParamsBuilder","","Helps with building a `DeviceFnMutParams`",null,null],[3,"ArgAndParamInfo","","Information that is held by both arguments and by parameters",null,null],[3,"DeviceFnMutArgs","","Holds the actual arguments to be passed into a `DeviceFnMut`",null,null],[3,"ArgsBuilder","","Helps with building a `DeviceFnMutArgs`",null,null],[4,"DeviceType","","Represents a type of device",null,null],[13,"Cpu","","",19,null],[13,"IntegratedGpu","","",19,null],[13,"DiscreteGpu","","",19,null],[13,"VirtualGpu","","",19,null],[13,"Other","","",19,null],[4,"Mutability","","Says whether or not something is mutable",null,null],[13,"Mut","","",20,null],[13,"Const","","",20,null],[5,"convert_to_spirv","","Converts a slice of bytes to a slice of 4-byte words",null,[[["read"],["seek"]],[["error"],["vec",["u32"]],["result",["vec","error"]]]]],[11,"name","","The name of the device (e.g. - \"Intel(R) UHD Graphics 620…",17,[[["self"]],["string"]]],[11,"vendor_id","","The vendor ID (e.g. - 32902)",17,[[["self"]],["usize"]]],[11,"device_id","","The devie ID (e.g. - 22807)",17,[[["self"]],["usize"]]],[11,"device_type","","The device type (e.g. - Cpu)",17,[[["self"]],["devicetype"]]],[11,"all","","Gets all detected devices",18,[[]]],[11,"create_with_size","","Creates a constant `DeviceBox<T>` with size of given…",18,[[["self"],["usize"]],["devicebox"]]],[11,"create_with_size_mut","","Creates a mutable `DeviceBox<T>` with size of given number…",18,[[["self"],["usize"]],["devicebox"]]],[11,"create_from","","Creates a constant `DeviceBox<T>` from a borrow of `T`",18,[[["sized"],["self"],["borrow"]],[["sized"],["devicebox"]]]],[11,"create_from_mut","","Creates a mutable `DeviceBox<T>` from a borrow of `T`",18,[[["sized"],["self"],["borrow"]],[["sized"],["devicebox"]]]],[11,"set_from","","Uploads data from the given borrow to `T` to the given…",18,[[["devicebox"],["sized"],["self"],["borrow"]]]],[11,"get","","Downloads data from the given `DeviceBox<T>`…",18,[[["devicebox"],["self"]]]],[11,"call","","Runs the given `DeviceFnMut` on a multi-dimensional space…",18,[[["devicefnmut"],["devicefnmutargs"],["self"]],[["launcherror"],["result",["launcherror"]]]]],[11,"compile","","Compiles a `DeviceFnMut` using the given parameters, entry…",18,[[["borrow"],["devicefnmutparams"],["string"],["into",["string"]],["self"]],[["compileerror"],["devicefnmut"],["result",["devicefnmut","compileerror"]]]]],[11,"new","","Constructs a set of parameters where each parameter is…",21,[[["usize"]],["self"]]],[11,"new","","Starts the building process with no parameters",22,[[],["self"]]],[11,"param","","Adds on a parameter with given mutability",22,[[["mutability"]],["self"]]],[11,"build","","Builds a `DeviceFnMutParams`",22,[[],["devicefnmutparams"]]],[11,"new","","Creates a new builder with no arguments",23,[[],["self"]]],[11,"arg","","Declare a new arguments by passing in a `DeviceBox`",23,[[["devicebox"]],["self"]]],[11,"build","","Builds the final `DeviceFnMutArgs`",23,[[],["devicefnmutargs"]]],[0,"prelude","emu_core","The module to import to import everything else",null,null],[14,"call","","A macro which evaluates to something that can be passed…",null,null],[11,"as_device_boxed","emu_core::cache","",1,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",1,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"as_device_boxed","emu_core::compile","",2,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",2,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",6,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",6,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",3,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",3,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"as_device_boxed","emu_core::compile_impls","",24,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",24,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",7,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",7,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",25,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",25,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",8,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",8,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",26,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",26,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"as_device_boxed","emu_core::spawn","",9,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",9,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"as_device_boxed","emu_core::pool","",12,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",12,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",13,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",13,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"as_device_boxed","emu_core::error","",27,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",27,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",28,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",28,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",29,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",29,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",30,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",30,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",31,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",31,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",32,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",32,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_string","","",32,[[["self"]],["string"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",14,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",14,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",15,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",15,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",16,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",16,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"as_device_boxed","emu_core::device","",17,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",17,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",18,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",18,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",33,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",33,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",34,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",34,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",21,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",21,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",22,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",22,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",35,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",35,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",36,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",36,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",23,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",23,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",19,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",19,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"as_device_boxed","","",20,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"as_device_boxed_mut","","",20,[[["self"]],[["nodeviceerror"],["result",["devicebox","nodeviceerror"]],["devicebox"]]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"contains","emu_core::cache","",1,[[["u64"]],["bool"]]],[11,"get","","",1,[[["u64"]],[["devicefnmut"],["arc",["devicefnmut"]]]]],[11,"insert","","",1,[[["devicefnmut"],["u64"],["arc",["devicefnmut"]]]]],[11,"compile_to_spirv","emu_core::compile_impls","",24,[[["spirv"]],[["compileerror"],["spirv"],["result",["spirv","compileerror"]]]]],[11,"compile_to_spirv","","",25,[[["glsl"]],[["compileerror"],["result",["spirv","compileerror"]],["spirv",["vec"]]]]],[11,"compile_to_spirv","","",26,[[["glslkernel"]],[["compileerror"],["result",["spirv","compileerror"]],["spirv",["vec"]]]]],[11,"from","emu_core::pool","",12,[[],["devicepoolmember"]]],[11,"from","emu_core::device","",17,[[["adapterinfo"]],["deviceinfo"]]],[11,"from","","",33,[[],["self"]]],[11,"from","","",34,[[],["devicefnmut"]]],[11,"from","","",21,[[["u32"],["hashmap",["u32"]],["hashmap",["u32","hashmap"]]],["devicefnmutparams"]]],[11,"from","","",36,[[["u32"],["hashmap",["u32"]]],["devicefnmutargs"]]],[11,"into","","",33,[[]]],[11,"clone","emu_core::pool","",13,[[["self"]],["devicepoolmemberinfo"]]],[11,"clone","emu_core::device","",17,[[["self"]],["deviceinfo"]]],[11,"clone","","",19,[[["self"]],["devicetype"]]],[11,"clone","","",21,[[["self"]],["devicefnmutparams"]]],[11,"clone","","",20,[[["self"]],["mutability"]]],[11,"clone","","",22,[[["self"]],["paramsbuilder"]]],[11,"clone","","",35,[[["self"]],["argandparaminfo"]]],[11,"default","","",35,[[],["argandparaminfo"]]],[11,"eq","emu_core::pool","",13,[[["self"],["devicepoolmemberinfo"]],["bool"]]],[11,"ne","","",13,[[["self"],["devicepoolmemberinfo"]],["bool"]]],[11,"eq","emu_core::device","",17,[[["deviceinfo"],["self"]],["bool"]]],[11,"ne","","",17,[[["deviceinfo"],["self"]],["bool"]]],[11,"eq","","",19,[[["devicetype"],["self"]],["bool"]]],[11,"eq","","",20,[[["self"],["mutability"]],["bool"]]],[11,"eq","","",35,[[["argandparaminfo"],["self"]],["bool"]]],[11,"ne","","",35,[[["argandparaminfo"],["self"]],["bool"]]],[11,"fmt","emu_core::pool","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","emu_core::error","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","emu_core::device","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","emu_core::error","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"hash","emu_core::compile","",2,[[["self"],["__h"]]]],[11,"hash","emu_core::compile_impls","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","emu_core::device","",19,[[["self"],["__h"]]]],[11,"hash","","",21,[[["self"],["h"]]]],[11,"hash","","",20,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["h"]]]],[11,"hash","","",35,[[["self"],["__h"]]]],[11,"from_iter","","",33,[[["intoiterator"]],["self"]]],[11,"new","","Create a constant `DeviceBox<T>` while consuming the given…",33,[[["intodeviceboxed"]],[["result",["nodeviceerror"]],["nodeviceerror"]]]],[11,"from_ref","","Create a constant `DeviceBox<T>` from a reference to `T`",33,[[["u"]],[["result",["nodeviceerror"]],["nodeviceerror"]]]],[11,"with_size","","Create a constant `DeviceBox<T>` where `T` has the given…",33,[[["usize"]],[["result",["nodeviceerror"]],["nodeviceerror"]]]],[11,"new_mut","","Create a mutable `DeviceBox<T>` while consuming the given…",33,[[["intodeviceboxed"]],[["result",["nodeviceerror"]],["nodeviceerror"]]]],[11,"from_ref_mut","","Create a mutable `DeviceBox<T>` from a reference to `T`",33,[[["u"]],[["result",["nodeviceerror"]],["nodeviceerror"]]]],[11,"with_size_mut","","Create a mutable `DeviceBox<T>` where `T` has the given…",33,[[["usize"]],[["result",["nodeviceerror"]],["nodeviceerror"]]]],[11,"set","","Uploads the given data `T` to self (a `DeviceBox<T>`)",33,[[["self"],["borrow"]],[["nodeviceerror"],["result",["nodeviceerror"]]]]],[11,"get","","Downloads from self (a `DeviceBox<[T]>`) to a `Box<[T]>`",33,[[["self"]]]]],"p":[[8,"Cache"],[3,"GlobalCache"],[3,"Spirv"],[4,"SpirvOrFinished"],[8,"GlslStruct"],[8,"CompileToSpirv"],[3,"SpirvBuilder"],[3,"Glsl"],[3,"GlslKernel"],[3,"Spawner"],[8,"IntoDeviceBoxed"],[8,"AsDeviceBoxed"],[3,"DevicePoolMember"],[3,"DevicePoolMemberInfo"],[4,"GetError"],[4,"CompileOrNoDeviceError"],[4,"LaunchError"],[3,"DeviceInfo"],[3,"Device"],[4,"DeviceType"],[4,"Mutability"],[3,"DeviceFnMutParams"],[3,"ParamsBuilder"],[3,"ArgsBuilder"],[3,"SpirvCompile"],[3,"GlslCompile"],[3,"GlslKernelCompile"],[3,"NoDeviceError"],[3,"UnavailableDeviceError"],[3,"CompileError"],[3,"CompletionError"],[3,"PoolAlreadyInitializedError"],[3,"RuntimeError"],[3,"DeviceBox"],[3,"DeviceFnMut"],[3,"ArgAndParamInfo"],[3,"DeviceFnMutArgs"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);